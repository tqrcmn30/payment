// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: useraccount.sql

package db

import (
	"context"

	
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_accounts (usac_account_no, usac_balance, usac_created_on, usac_buty_id, usac_user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING usac_id, usac_account_no, usac_balance, usac_created_on, usac_buty_id, usac_user_id
`

type CreateUserAccountParams struct {
	UsacAccountNo string         `json:"usac_account_no"`
	UsacBalance   *int32 `json:"usac_balance"`
	UsacCreatedOn *string    `json:"usac_created_on"`
	UsacButyID    *int32         `json:"usac_buty_id"`
	UsacUserID    *int32         `json:"usac_user_id"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (*UserAccount, error) {
	row := q.db.QueryRow(ctx, createUserAccount,
		arg.UsacAccountNo,
		arg.UsacBalance,
		arg.UsacCreatedOn,
		arg.UsacButyID,
		arg.UsacUserID,
	)
	var i UserAccount
	err := row.Scan(
		&i.UsacID,
		&i.UsacAccountNo,
		&i.UsacBalance,
		&i.UsacCreatedOn,
		&i.UsacButyID,
		&i.UsacUserID,
	)
	return &i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
DELETE FROM user_accounts WHERE usac_id = $1
`

func (q *Queries) DeleteUserAccount(ctx context.Context, usacID int32) error {
	_, err := q.db.Exec(ctx, deleteUserAccount, usacID)
	return err
}

const getUserAccountByID = `-- name: GetUserAccountByID :one
SELECT usac_id, usac_account_no, usac_balance, usac_created_on, usac_buty_id, usac_user_id
FROM user_accounts
WHERE usac_id = $1
`

func (q *Queries) GetUserAccountByID(ctx context.Context, usacID int32) (*UserAccount, error) {
	row := q.db.QueryRow(ctx, getUserAccountByID, usacID)
	var i UserAccount
	err := row.Scan(
		&i.UsacID,
		&i.UsacAccountNo,
		&i.UsacBalance,
		&i.UsacCreatedOn,
		&i.UsacButyID,
		&i.UsacUserID,
	)
	return &i, err
}

const listUserAccounts = `-- name: ListUserAccounts :many
SELECT usac_id, usac_account_no, usac_balance, usac_created_on, usac_buty_id, usac_user_id
FROM user_accounts
ORDER BY usac_created_on DESC
`

func (q *Queries) ListUserAccounts(ctx context.Context) ([]*UserAccount, error) {
	rows, err := q.db.Query(ctx, listUserAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserAccount
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.UsacID,
			&i.UsacAccountNo,
			&i.UsacBalance,
			&i.UsacCreatedOn,
			&i.UsacButyID,
			&i.UsacUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAccount = `-- name: UpdateUserAccount :exec
UPDATE user_accounts
SET usac_account_no = $2, usac_balance = $3, usac_created_on = $4, usac_buty_id = $5, usac_user_id = $6
WHERE usac_id = $1
`

type UpdateUserAccountParams struct {
	UsacID        int32          `json:"usac_id"`
	UsacAccountNo string         `json:"usac_account_no"`
	UsacBalance   *int32 `json:"usac_balance"`
	UsacCreatedOn *string    `json:"usac_created_on"`
	UsacButyID    *int32         `json:"usac_buty_id"`
	UsacUserID    *int32         `json:"usac_user_id"`
}

func (q *Queries) UpdateUserAccount(ctx context.Context, arg UpdateUserAccountParams) error {
	_, err := q.db.Exec(ctx, updateUserAccount,
		arg.UsacID,
		arg.UsacAccountNo,
		arg.UsacBalance,
		arg.UsacCreatedOn,
		arg.UsacButyID,
		arg.UsacUserID,
	)
	return err
}
